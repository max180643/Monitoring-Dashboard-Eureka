{"version":3,"file":"index.js","sources":["../src/Cell.tsx","../src/Row.tsx","../src/XLabels.tsx","../src/Column.tsx","../src/YLabels.tsx","../src/YLabelAligner.tsx","../src/useElemetHeight.ts","../src/index.tsx"],"sourcesContent":["import React from 'react'\n\ninterface Props {\n  render?: (x: number, y: number, ratio: number) => {}\n  posX: number\n  posY: number\n  style?: (x: number, y: number, ratio: number) => {}\n  ratio: number\n  value: number\n  height?: string\n  square?: boolean\n  onClick?: (x: number, y: number) => void\n}\n\nconst noop = (returnVal: any) => () => returnVal\n\nconst Cell = ({\n  render = noop(null),\n  style = noop({}),\n  ratio,\n  posX,\n  posY,\n  square = false,\n  height = '2rem',\n  value,\n  onClick\n}: Props) => {\n  return (\n    <div\n      onClick={() => (onClick || noop({}))(posX, posY)}\n      style={{\n        border: '1px solid #fff',\n        borderWidth: '1px 1px 0 0',\n        textAlign: 'center',\n        color: `rgb(0, 0, 0, ${ratio / 2 + 0.4})`,\n        overflow: 'hidden',\n        boxSizing: 'border-box',\n        flexGrow: square ? 0 : 1,\n        flexBasis: square ? height : 0,\n        flexShrink: 0,\n        height: height,\n        lineHeight: height,\n        borderRadius: '4px',\n        fontSize: '.8rem',\n        cursor: onClick ? 'pointer' : 'initial',\n        background: `rgb(12, 160, 44, ${ratio + 0.05})`,\n        ...style(posX, posY, ratio)\n      }}\n    >\n      {render(posX, posY, value)}\n    </div>\n  )\n}\n\nexport default React.memo(Cell)\n","import React from 'react'\n\ninterface Props {\n  children: any\n  reverse?: boolean\n}\n\nexport default function Row({ children, reverse = false }: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: reverse ? 'row-reverse' : 'row',\n        justifyContent: reverse ? 'flex-end' : 'initial'\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  labels: string[]\n  xLabelsStyle?: (index: number) => {}\n  square?: boolean\n  height: string\n}\n\nexport default function XLabels({\n  labels,\n  xLabelsStyle = () => ({}),\n  height,\n  square = false\n}: Props) {\n  const widthPercent = `${100 / labels.length}%`\n  return (\n    <div style={{ display: 'flex', textAlign: 'center' }}>\n      {labels.map((label, index) => (\n        <div\n          key={label}\n          style={{\n            padding: '0.2rem 0',\n            boxSizing: 'border-box',\n            flexGrow: square ? 'initial' : 1,\n            overflow: 'hidden',\n            flexShrink: 1,\n            flexBasis: square ? height : widthPercent,\n            width: square ? height : widthPercent,\n            ...xLabelsStyle(index)\n          }}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  children: any\n  reverse?: boolean\n  grow?: boolean\n}\n\nexport default function Column({\n  children,\n  grow = false,\n  reverse = false\n}: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: reverse ? 'column-reverse' : 'column',\n        flexGrow: grow ? 1 : 0\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  labels: string[]\n  height: string\n  reverse?: boolean\n  yLabelsStyle?: (index: number) => {}\n}\n\nexport default function YLabels({\n  labels,\n  height,\n  yLabelsStyle = () => ({}),\n  reverse = false\n}: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: reverse ? 'left' : 'right'\n      }}\n    >\n      {labels.map((label, index) => (\n        <div\n          key={label}\n          style={{\n            boxSizing: 'border-box',\n            padding: '0 0.2rem',\n            lineHeight: height,\n            ...yLabelsStyle(index)\n          }}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  xLabelHeight: number\n  isXLabelReverse: boolean\n  children: any\n}\n\nexport default function YLabelAligner({\n  xLabelHeight,\n  isXLabelReverse,\n  children\n}: Props) {\n  const style = {\n    [isXLabelReverse ? 'marginBottom' : 'marginTop']: `${xLabelHeight}px`\n  }\n  return <div style={style}>{children}</div>\n}\n","import React from 'react'\n\ninterface ClientHeight {\n  clientHeight: number\n}\n\nexport default function useElemetHeight(\n  initHeight: number\n): [number, React.MutableRefObject<any>] {\n  const eleRef = React.useRef(null)\n  const [eleHeight, setEleHeight] = React.useState<number>(initHeight)\n\n  React.useEffect(() => {\n    if (eleRef.current) {\n      const height = ((eleRef.current || {}) as ClientHeight).clientHeight\n      setEleHeight(height)\n    }\n  }, [])\n\n  return [eleHeight, eleRef]\n}\n","import * as React from 'react'\nimport Cell from './Cell'\nimport Row from './Row'\nimport XLabels from './XLabels'\nimport Column from './Column'\nimport YLabels from './YLabels'\nimport YLabelAligner from './YLabelAligner'\nimport useElemetHeight from './useElemetHeight'\n\ninterface Props {\n  data: number[][]\n  xLabels?: string[]\n  yLabels?: string[]\n  cellHeight?: string\n  square?: boolean\n  xLabelsPos?: 'top' | 'bottom'\n  yLabelsPos?: 'left' | 'right'\n  xLabelsStyle?: (index: number) => {}\n  yLabelsStyle?: (index: number) => {}\n  cellStyle?: (x: number, y: number, ratio: number) => {}\n  cellRender?: (x: number, y: number, value: number) => {}\n  onClick?: (x: number, y: number) => void\n}\n\nfunction getMinMax(data: number[][]): [number, number] {\n  const flatArray = data.reduce((i, o) => [...o, ...i], [])\n  const max = Math.max(...flatArray)\n  const min = Math.min(...flatArray)\n  return [min, max]\n}\n\nexport const HeatMapGrid = ({\n  data,\n  xLabels,\n  yLabels,\n  xLabelsPos = 'top',\n  yLabelsPos = 'left',\n  square = false,\n  cellHeight = '2px',\n  xLabelsStyle,\n  yLabelsStyle,\n  cellStyle,\n  cellRender,\n  onClick\n}: Props) => {\n  const [xLabelHeight, xLabelRef] = useElemetHeight(22)\n  const [min, max] = getMinMax(data)\n  const minMaxDiff = max - min\n  const isXLabelReverse = xLabelsPos === 'bottom'\n  const isYLabelReverse = yLabelsPos === 'right'\n\n  return (\n    <Row reverse={isYLabelReverse}>\n      {yLabels && (\n        <YLabelAligner\n          xLabelHeight={xLabelHeight}\n          isXLabelReverse={isXLabelReverse}\n        >\n          <YLabels\n            reverse={isYLabelReverse}\n            labels={yLabels}\n            height={cellHeight}\n            yLabelsStyle={yLabelsStyle}\n          />\n        </YLabelAligner>\n      )}\n      <Column reverse={isXLabelReverse} grow={!square}>\n        <div ref={xLabelRef}>\n          {xLabels && (\n            <XLabels\n              labels={xLabels}\n              xLabelsStyle={xLabelsStyle}\n              height={cellHeight}\n              square={square}\n            />\n          )}\n        </div>\n        <Column>\n          {data.map((rowItems, xi) => (\n            <Row key={xi}>\n              {rowItems.map((value, yi) => (\n                <Cell\n                  key={`${xi}-${yi}`}\n                  posX={xi}\n                  posY={yi}\n                  onClick={onClick}\n                  value={value}\n                  height={cellHeight}\n                  square={square}\n                  render={cellRender}\n                  style={cellStyle}\n                  ratio={(value - min) / minMaxDiff}\n                />\n              ))}\n            </Row>\n          ))}\n        </Column>\n      </Column>\n    </Row>\n  )\n}\n"],"names":["noop","returnVal","Cell","render","style","ratio","posX","posY","square","height","value","onClick","React","border","borderWidth","textAlign","color","overflow","boxSizing","flexGrow","flexBasis","flexShrink","lineHeight","borderRadius","fontSize","cursor","background","memo","Row","children","reverse","display","flexDirection","justifyContent","XLabels","labels","xLabelsStyle","widthPercent","length","map","label","index","key","padding","width","Column","grow","YLabels","yLabelsStyle","YLabelAligner","xLabelHeight","isXLabelReverse","useElemetHeight","initHeight","eleRef","useRef","useState","eleHeight","setEleHeight","useEffect","current","clientHeight","getMinMax","data","flatArray","reduce","i","o","max","Math","min","HeatMapGrid","xLabels","yLabels","xLabelsPos","yLabelsPos","cellHeight","cellStyle","cellRender","xLabelRef","minMaxDiff","isYLabelReverse","ref","rowItems","xi","yi"],"mappings":"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"}