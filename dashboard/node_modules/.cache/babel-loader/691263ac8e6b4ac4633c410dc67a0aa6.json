{"ast":null,"code":"import React__default, { createElement } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar noop = function noop(returnVal) {\n  return function () {\n    return returnVal;\n  };\n};\n\nvar Cell = function Cell(_ref) {\n  var _ref$render = _ref.render,\n      render = _ref$render === void 0 ? noop(null) : _ref$render,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? noop({}) : _ref$style,\n      ratio = _ref.ratio,\n      posX = _ref.posX,\n      posY = _ref.posY,\n      _ref$square = _ref.square,\n      square = _ref$square === void 0 ? false : _ref$square,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? '2rem' : _ref$height,\n      value = _ref.value,\n      _onClick = _ref.onClick;\n  return React__default.createElement(\"div\", {\n    onClick: function onClick() {\n      return (_onClick || noop({}))(posX, posY);\n    },\n    style: _extends({\n      border: '1px solid #fff',\n      borderWidth: '1px 1px 0 0',\n      textAlign: 'center',\n      color: \"rgb(0, 0, 0, \" + (ratio / 2 + 0.4) + \")\",\n      overflow: 'hidden',\n      boxSizing: 'border-box',\n      flexGrow: square ? 0 : 1,\n      flexBasis: square ? height : 0,\n      flexShrink: 0,\n      height: height,\n      lineHeight: height,\n      borderRadius: '4px',\n      fontSize: '.8rem',\n      cursor: _onClick ? 'pointer' : 'initial',\n      background: \"rgb(12, 160, 44, \" + (ratio + 0.05) + \")\"\n    }, style(posX, posY, ratio))\n  }, render(posX, posY, value));\n};\n\nvar Cell$1 = React__default.memo(Cell);\n\nfunction Row(_ref) {\n  var children = _ref.children,\n      _ref$reverse = _ref.reverse,\n      reverse = _ref$reverse === void 0 ? false : _ref$reverse;\n  return React__default.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: reverse ? 'row-reverse' : 'row',\n      justifyContent: reverse ? 'flex-end' : 'initial'\n    }\n  }, children);\n}\n\nfunction XLabels(_ref) {\n  var labels = _ref.labels,\n      _ref$xLabelsStyle = _ref.xLabelsStyle,\n      xLabelsStyle = _ref$xLabelsStyle === void 0 ? function () {\n    return {};\n  } : _ref$xLabelsStyle,\n      height = _ref.height,\n      _ref$square = _ref.square,\n      square = _ref$square === void 0 ? false : _ref$square;\n  var widthPercent = 100 / labels.length + \"%\";\n  return React__default.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      textAlign: 'center'\n    }\n  }, labels.map(function (label, index) {\n    return React__default.createElement(\"div\", {\n      key: label,\n      style: _extends({\n        padding: '0.2rem 0',\n        boxSizing: 'border-box',\n        flexGrow: square ? 'initial' : 1,\n        overflow: 'hidden',\n        flexShrink: 1,\n        flexBasis: square ? height : widthPercent,\n        width: square ? height : widthPercent\n      }, xLabelsStyle(index))\n    }, label);\n  }));\n}\n\nfunction Column(_ref) {\n  var children = _ref.children,\n      _ref$grow = _ref.grow,\n      grow = _ref$grow === void 0 ? false : _ref$grow,\n      _ref$reverse = _ref.reverse,\n      reverse = _ref$reverse === void 0 ? false : _ref$reverse;\n  return React__default.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: reverse ? 'column-reverse' : 'column',\n      flexGrow: grow ? 1 : 0\n    }\n  }, children);\n}\n\nfunction YLabels(_ref) {\n  var labels = _ref.labels,\n      height = _ref.height,\n      _ref$yLabelsStyle = _ref.yLabelsStyle,\n      yLabelsStyle = _ref$yLabelsStyle === void 0 ? function () {\n    return {};\n  } : _ref$yLabelsStyle,\n      _ref$reverse = _ref.reverse,\n      reverse = _ref$reverse === void 0 ? false : _ref$reverse;\n  return React__default.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      textAlign: reverse ? 'left' : 'right'\n    }\n  }, labels.map(function (label, index) {\n    return React__default.createElement(\"div\", {\n      key: label,\n      style: _extends({\n        boxSizing: 'border-box',\n        padding: '0 0.2rem',\n        lineHeight: height\n      }, yLabelsStyle(index))\n    }, label);\n  }));\n}\n\nfunction YLabelAligner(_ref) {\n  var _style;\n\n  var xLabelHeight = _ref.xLabelHeight,\n      isXLabelReverse = _ref.isXLabelReverse,\n      children = _ref.children;\n  var style = (_style = {}, _style[isXLabelReverse ? 'marginBottom' : 'marginTop'] = xLabelHeight + \"px\", _style);\n  return React__default.createElement(\"div\", {\n    style: style\n  }, children);\n}\n\nfunction useElemetHeight(initHeight) {\n  var eleRef = React__default.useRef(null);\n\n  var _React$useState = React__default.useState(initHeight),\n      eleHeight = _React$useState[0],\n      setEleHeight = _React$useState[1];\n\n  React__default.useEffect(function () {\n    if (eleRef.current) {\n      var height = (eleRef.current || {}).clientHeight;\n      setEleHeight(height);\n    }\n  }, []);\n  return [eleHeight, eleRef];\n}\n\nfunction getMinMax(data) {\n  var flatArray = data.reduce(function (i, o) {\n    return [].concat(o, i);\n  }, []);\n  var max = Math.max.apply(Math, flatArray);\n  var min = Math.min.apply(Math, flatArray);\n  return [min, max];\n}\n\nvar HeatMapGrid = function HeatMapGrid(_ref) {\n  var data = _ref.data,\n      xLabels = _ref.xLabels,\n      yLabels = _ref.yLabels,\n      _ref$xLabelsPos = _ref.xLabelsPos,\n      xLabelsPos = _ref$xLabelsPos === void 0 ? 'top' : _ref$xLabelsPos,\n      _ref$yLabelsPos = _ref.yLabelsPos,\n      yLabelsPos = _ref$yLabelsPos === void 0 ? 'left' : _ref$yLabelsPos,\n      _ref$square = _ref.square,\n      square = _ref$square === void 0 ? false : _ref$square,\n      _ref$cellHeight = _ref.cellHeight,\n      cellHeight = _ref$cellHeight === void 0 ? '2px' : _ref$cellHeight,\n      xLabelsStyle = _ref.xLabelsStyle,\n      yLabelsStyle = _ref.yLabelsStyle,\n      cellStyle = _ref.cellStyle,\n      cellRender = _ref.cellRender,\n      onClick = _ref.onClick;\n\n  var _useElemetHeight = useElemetHeight(22),\n      xLabelHeight = _useElemetHeight[0],\n      xLabelRef = _useElemetHeight[1];\n\n  var _getMinMax = getMinMax(data),\n      min = _getMinMax[0],\n      max = _getMinMax[1];\n\n  var minMaxDiff = max - min;\n  var isXLabelReverse = xLabelsPos === 'bottom';\n  var isYLabelReverse = yLabelsPos === 'right';\n  return createElement(Row, {\n    reverse: isYLabelReverse\n  }, yLabels && createElement(YLabelAligner, {\n    xLabelHeight: xLabelHeight,\n    isXLabelReverse: isXLabelReverse\n  }, createElement(YLabels, {\n    reverse: isYLabelReverse,\n    labels: yLabels,\n    height: cellHeight,\n    yLabelsStyle: yLabelsStyle\n  })), createElement(Column, {\n    reverse: isXLabelReverse,\n    grow: !square\n  }, createElement(\"div\", {\n    ref: xLabelRef\n  }, xLabels && createElement(XLabels, {\n    labels: xLabels,\n    xLabelsStyle: xLabelsStyle,\n    height: cellHeight,\n    square: square\n  })), createElement(Column, null, data.map(function (rowItems, xi) {\n    return createElement(Row, {\n      key: xi\n    }, rowItems.map(function (value, yi) {\n      return createElement(Cell$1, {\n        key: xi + \"-\" + yi,\n        posX: xi,\n        posY: yi,\n        onClick: onClick,\n        value: value,\n        height: cellHeight,\n        square: square,\n        render: cellRender,\n        style: cellStyle,\n        ratio: (value - min) / minMaxDiff\n      });\n    }));\n  }))));\n};\n\nexport { HeatMapGrid };","map":{"version":3,"sources":["../src/Cell.tsx","../src/Row.tsx","../src/XLabels.tsx","../src/Column.tsx","../src/YLabels.tsx","../src/YLabelAligner.tsx","../src/useElemetHeight.ts","../src/index.tsx"],"names":["noop","Cell","render","style","ratio","posX","posY","square","height","value","onClick","border","borderWidth","textAlign","color","overflow","boxSizing","flexGrow","flexBasis","flexShrink","lineHeight","borderRadius","fontSize","cursor","background","React","Row","children","reverse","display","flexDirection","justifyContent","XLabels","labels","xLabelsStyle","widthPercent","key","label","padding","width","Column","grow","YLabels","yLabelsStyle","YLabelAligner","xLabelHeight","isXLabelReverse","useElemetHeight","initHeight","eleRef","eleHeight","setEleHeight","flatArray","max","Math","min","HeatMapGrid","data","xLabels","yLabels","xLabelsPos","yLabelsPos","cellHeight","cellStyle","cellRender","xLabelRef","getMinMax","minMaxDiff","isYLabelReverse","ref","xi","yi"],"mappings":";;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAAA,SAAA,EAAA;AAAA,SAAoB,YAAA;AAAA,WAAA,SAAA;AAApB,GAAA;AAAb,CAAA;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAA,IAAA,EAAA;yBACXC,M;MAAAA,MAAAA,GAAAA,WAAAA,KAAAA,KAAAA,CAAAA,GAASF,IAAI,CAAA,IAAA,CAAbE,GAAa,W;wBACbC,K;MAAAA,KAAAA,GAAAA,UAAAA,KAAAA,KAAAA,CAAAA,GAAQH,IAAI,CAAA,EAAA,CAAZG,GAAY,U;MACZC,KAAAA,GAAAA,IAAAA,CAAAA,K;MACAC,IAAAA,GAAAA,IAAAA,CAAAA,I;MACAC,IAAAA,GAAAA,IAAAA,CAAAA,I;yBACAC,M;MAAAA,MAAAA,GAAAA,WAAAA,KAAAA,KAAAA,CAAAA,GAAS,KAATA,GAAS,W;yBACTC,M;MAAAA,MAAAA,GAAAA,WAAAA,KAAAA,KAAAA,CAAAA,GAAS,MAATA,GAAS,W;MACTC,KAAAA,GAAAA,IAAAA,CAAAA,K;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,O;AAEA,SACE,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEA,IAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,aAAM,CAACA,QAAO,IAAIV,IAAI,CAAhB,EAAgB,CAAhB,EAAA,IAAA,EAAN,IAAM,CAAN;AAAA,KADX;AAEEG,IAAAA,KAAK,EAAA,QAAA,CAAA;AACHQ,MAAAA,MAAM,EADH,gBAAA;AAEHC,MAAAA,WAAW,EAFR,aAAA;AAGHC,MAAAA,SAAS,EAHN,QAAA;AAIHC,MAAAA,KAAK,EAAA,mBAAkBV,KAAK,GAALA,CAAAA,GAAlB,GAAA,IAJF,GAAA;AAKHW,MAAAA,QAAQ,EALL,QAAA;AAMHC,MAAAA,SAAS,EANN,YAAA;AAOHC,MAAAA,QAAQ,EAAEV,MAAM,GAAA,CAAA,GAPb,CAAA;AAQHW,MAAAA,SAAS,EAAEX,MAAM,GAAA,MAAA,GARd,CAAA;AASHY,MAAAA,UAAU,EATP,CAAA;AAUHX,MAAAA,MAAM,EAVH,MAAA;AAWHY,MAAAA,UAAU,EAXP,MAAA;AAYHC,MAAAA,YAAY,EAZT,KAAA;AAaHC,MAAAA,QAAQ,EAbL,OAAA;AAcHC,MAAAA,MAAM,EAAEb,QAAO,GAAA,SAAA,GAdZ,SAAA;AAeHc,MAAAA,UAAU,EAAA,uBAAsBpB,KAAK,GAA3B,IAAA,IAAA;AAfP,KAAA,EAgBAD,KAAK,CAAA,IAAA,EAAA,IAAA,EAhBL,KAgBK,CAhBL;AAFP,GAAA,EAqBGD,MAAM,CAAA,IAAA,EAAA,IAAA,EAtBX,KAsBW,CArBT,CADF;AAXF,CAAA;;AAsCA,IAAA,MAAA,GAAeuB,cAAK,CAALA,IAAAA,CAAf,IAAeA,CAAf;;SC/CwBC,G,CAAAA,I,EAAAA;MAAMC,QAAAA,GAAAA,IAAAA,CAAAA,Q;0BAAUC,O;MAAAA,OAAAA,GAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAU,KAAVA,GAAU,Y;AAChD,SACE,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEzB,IAAAA,KAAK,EAAE;AACL0B,MAAAA,OAAO,EADF,MAAA;AAELC,MAAAA,aAAa,EAAEF,OAAO,GAAA,aAAA,GAFjB,KAAA;AAGLG,MAAAA,cAAc,EAAEH,OAAO,GAAA,UAAA,GAAgB;AAHlC;AADT,GAAA,EADF,QACE,CADF;AAWD;;SCVuBI,O,CAAAA,I,EAAAA;MACtBC,MAAAA,GAAAA,IAAAA,CAAAA,M;+BACAC,Y;MAAAA,YAAAA,GAAAA,iBAAAA,KAAAA,KAAAA,CAAAA,GAAe,YAAA;AAAA,WAAA,EAAA;AAAA,GAAfA,GAAe,iB;MACf1B,MAAAA,GAAAA,IAAAA,CAAAA,M;yBACAD,M;MAAAA,MAAAA,GAAAA,WAAAA,KAAAA,KAAAA,CAAAA,GAAS,KAATA,GAAS,W;AAET,MAAM4B,YAAY,GAAM,MAAMF,MAAM,CAAlB,MAAM,GAAxB,GAAA;AACA,SACE,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK9B,IAAAA,KAAK,EAAE;AAAE0B,MAAAA,OAAO,EAAT,MAAA;AAAmBhB,MAAAA,SAAS,EAAE;AAA9B;AAAZ,GAAA,EACG,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAA;AAAA,WACV,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEuB,MAAAA,GAAG,EAAEC,KADP;AAEElC,MAAAA,KAAK,EAAA,QAAA,CAAA;AACHmC,QAAAA,OAAO,EADJ,UAAA;AAEHtB,QAAAA,SAAS,EAFN,YAAA;AAGHC,QAAAA,QAAQ,EAAEV,MAAM,GAAA,SAAA,GAHb,CAAA;AAIHQ,QAAAA,QAAQ,EAJL,QAAA;AAKHI,QAAAA,UAAU,EALP,CAAA;AAMHD,QAAAA,SAAS,EAAEX,MAAM,GAAA,MAAA,GANd,YAAA;AAOHgC,QAAAA,KAAK,EAAEhC,MAAM,GAAA,MAAA,GAAY4B;AAPtB,OAAA,EAQAD,YAAY,CARZ,KAQY,CARZ;AAFP,KAAA,EADU,KACV,CADU;AAFhB,GAEK,CADH,CADF;AAqBD;;SC7BuBM,M,CAAAA,I,EAAAA;MACtBb,QAAAA,GAAAA,IAAAA,CAAAA,Q;uBACAc,I;MAAAA,IAAAA,GAAAA,SAAAA,KAAAA,KAAAA,CAAAA,GAAO,KAAPA,GAAO,S;0BACPb,O;MAAAA,OAAAA,GAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAU,KAAVA,GAAU,Y;AAEV,SACE,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEzB,IAAAA,KAAK,EAAE;AACL0B,MAAAA,OAAO,EADF,MAAA;AAELC,MAAAA,aAAa,EAAEF,OAAO,GAAA,gBAAA,GAFjB,QAAA;AAGLX,MAAAA,QAAQ,EAAEwB,IAAI,GAAA,CAAA,GAAO;AAHhB;AADT,GAAA,EADF,QACE,CADF;AAWD;;SCfuBC,O,CAAAA,I,EAAAA;MACtBT,MAAAA,GAAAA,IAAAA,CAAAA,M;MACAzB,MAAAA,GAAAA,IAAAA,CAAAA,M;+BACAmC,Y;MAAAA,YAAAA,GAAAA,iBAAAA,KAAAA,KAAAA,CAAAA,GAAe,YAAA;AAAA,WAAA,EAAA;AAAA,GAAfA,GAAe,iB;0BACff,O;MAAAA,OAAAA,GAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAU,KAAVA,GAAU,Y;AAEV,SACE,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEzB,IAAAA,KAAK,EAAE;AACL0B,MAAAA,OAAO,EADF,MAAA;AAELC,MAAAA,aAAa,EAFR,QAAA;AAGLjB,MAAAA,SAAS,EAAEe,OAAO,GAAA,MAAA,GAAY;AAHzB;AADT,GAAA,EAOG,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAA;AAAA,WACV,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEQ,MAAAA,GAAG,EAAEC,KADP;AAEElC,MAAAA,KAAK,EAAA,QAAA,CAAA;AACHa,QAAAA,SAAS,EADN,YAAA;AAEHsB,QAAAA,OAAO,EAFJ,UAAA;AAGHlB,QAAAA,UAAU,EAAEZ;AAHT,OAAA,EAIAmC,YAAY,CAJZ,KAIY,CAJZ;AAFP,KAAA,EADU,KACV,CADU;AARhB,GAQK,CAPH,CADF;AAuBD;;SC9BuBC,a,CAAAA,I,EAAAA;;;MACtBC,YAAAA,GAAAA,IAAAA,CAAAA,Y;MACAC,eAAAA,GAAAA,IAAAA,CAAAA,e;MACAnB,QAAAA,GAAAA,IAAAA,CAAAA,Q;AAEA,MAAMxB,KAAK,IAAA,MAAA,GAAA,EAAA,EAAA,MAAA,CACR2C,eAAe,GAAA,cAAA,GADP,WAAA,CAAA,GAC4CD,YAD5C,GAAA,IAAA,EAAX,MAAW,CAAX;AAGA,SAAO,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK1C,IAAAA,KAAK,EAAEA;AAAZ,GAAA,EAAP,QAAO,CAAP;AACD;;SCXuB4C,e,CACtBC,U,EAAAA;AAEA,MAAMC,MAAM,GAAGxB,cAAK,CAALA,MAAAA,CAAf,IAAeA,CAAf;;wBACkCA,cAAK,CAALA,QAAAA,CAAAA,UAAAA,C;MAA3ByB,SAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;MAAWC,YAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;;AAElB1B,EAAAA,cAAK,CAALA,SAAAA,CAAgB,YAAA;AACd,QAAIwB,MAAM,CAAV,OAAA,EAAoB;AAClB,UAAMzC,MAAM,GAAI,CAACyC,MAAM,CAANA,OAAAA,IAAD,EAAA,EAAhB,YAAA;AACAE,MAAAA,YAAY,CAAZA,MAAY,CAAZA;AACD;AAJH1B,GAAAA,EAAAA,EAAAA;AAOA,SAAO,CAAA,SAAA,EAAP,MAAO,CAAP;AACD;;ACID,SAAA,SAAA,CAAA,IAAA,EAAA;AACE,MAAM2B,SAAS,GAAG,IAAI,CAAJ,MAAA,CAAY,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,WAAA,GAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAZ,GAAA,EAAlB,EAAkB,CAAlB;AACA,MAAMC,GAAG,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAZ,SAAYA,CAAZ;AACA,MAAMC,GAAG,GAAGD,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAZ,SAAYA,CAAZ;AACA,SAAO,CAAA,GAAA,EAAP,GAAO,CAAP;AACD;;AAED,IAAaE,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAAA;MACzBC,IAAAA,GAAAA,IAAAA,CAAAA,I;MACAC,OAAAA,GAAAA,IAAAA,CAAAA,O;MACAC,OAAAA,GAAAA,IAAAA,CAAAA,O;6BACAC,U;MAAAA,UAAAA,GAAAA,eAAAA,KAAAA,KAAAA,CAAAA,GAAa,KAAbA,GAAa,e;6BACbC,U;MAAAA,UAAAA,GAAAA,eAAAA,KAAAA,KAAAA,CAAAA,GAAa,MAAbA,GAAa,e;yBACbtD,M;MAAAA,MAAAA,GAAAA,WAAAA,KAAAA,KAAAA,CAAAA,GAAS,KAATA,GAAS,W;6BACTuD,U;MAAAA,UAAAA,GAAAA,eAAAA,KAAAA,KAAAA,CAAAA,GAAa,KAAbA,GAAa,e;MACb5B,YAAAA,GAAAA,IAAAA,CAAAA,Y;MACAS,YAAAA,GAAAA,IAAAA,CAAAA,Y;MACAoB,SAAAA,GAAAA,IAAAA,CAAAA,S;MACAC,UAAAA,GAAAA,IAAAA,CAAAA,U;MACAtD,OAAAA,GAAAA,IAAAA,CAAAA,O;;yBAEkCqC,eAAe,CAAA,EAAA,C;MAA1CF,YAAAA,GAAAA,gBAAAA,CAAAA,CAAAA,C;MAAcoB,SAAAA,GAAAA,gBAAAA,CAAAA,CAAAA,C;;mBACFC,SAAS,CAAA,IAAA,C;MAArBX,GAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;MAAKF,GAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;AACZ,MAAMc,UAAU,GAAGd,GAAG,GAAtB,GAAA;AACA,MAAMP,eAAe,GAAGc,UAAU,KAAlC,QAAA;AACA,MAAMQ,eAAe,GAAGP,UAAU,KAAlC,OAAA;AAEA,SACE,aAAA,CAAA,GAAA,EAAA;AAAKjC,IAAAA,OAAO,EAAEwC;AAAd,GAAA,EACGT,OAAO,IACN,aAAA,CAAA,aAAA,EAAA;AACEd,IAAAA,YAAY,EAAEA,YADhB;AAEEC,IAAAA,eAAe,EAAEA;AAFnB,GAAA,EAIE,aAAA,CAAA,OAAA,EAAA;AACElB,IAAAA,OAAO,EAAEwC,eADX;AAEEnC,IAAAA,MAAM,EAAE0B,OAFV;AAGEnD,IAAAA,MAAM,EAAEsD,UAHV;AAIEnB,IAAAA,YAAY,EAAEA;AAJhB,GAAA,CAJF,CAFJ,EAcE,aAAA,CAAA,MAAA,EAAA;AAAQf,IAAAA,OAAO,EAAEkB,eAAjB;AAAkCL,IAAAA,IAAI,EAAE,CAAClC;AAAzC,GAAA,EACE,aAAA,CAAA,KAAA,EAAA;AAAK8D,IAAAA,GAAG,EAAEJ;AAAV,GAAA,EACGP,OAAO,IACN,aAAA,CAAA,OAAA,EAAA;AACEzB,IAAAA,MAAM,EAAEyB,OADV;AAEExB,IAAAA,YAAY,EAAEA,YAFhB;AAGE1B,IAAAA,MAAM,EAAEsD,UAHV;AAIEvD,IAAAA,MAAM,EAAEA;AAJV,GAAA,CAFJ,CADF,EAWE,aAAA,CAAA,MAAA,EAAA,IAAA,EACG,IAAI,CAAJ,GAAA,CAAS,UAAA,QAAA,EAAA,EAAA,EAAA;AAAA,WACR,aAAA,CAAA,GAAA,EAAA;AAAK6B,MAAAA,GAAG,EAAEkC;AAAV,KAAA,EACG,QAAQ,CAAR,GAAA,CAAa,UAAA,KAAA,EAAA,EAAA,EAAA;AAAA,aACZ,aAAA,CAAA,MAAA,EAAA;AACElC,QAAAA,GAAG,EAAKkC,EAAL,GAAA,GAAKA,GAAMC,EADhB;AAEElE,QAAAA,IAAI,EAAEiE,EAFR;AAGEhE,QAAAA,IAAI,EAAEiE,EAHR;AAIE7D,QAAAA,OAAO,EAAEA,OAJX;AAKED,QAAAA,KAAK,EAAEA,KALT;AAMED,QAAAA,MAAM,EAAEsD,UANV;AAOEvD,QAAAA,MAAM,EAAEA,MAPV;AAQEL,QAAAA,MAAM,EAAE8D,UARV;AASE7D,QAAAA,KAAK,EAAE4D,SATT;AAUE3D,QAAAA,KAAK,EAAE,CAACK,KAAK,GAAN,GAAA,IAAgB0D;AAVzB,OAAA,CADY;AAFR,KAEL,CADH,CADQ;AA3BlB,GA2BS,CADH,CAXF,CAdF,CADF;AApBK,CAAP","sourcesContent":["import React from 'react'\n\ninterface Props {\n  render?: (x: number, y: number, ratio: number) => {}\n  posX: number\n  posY: number\n  style?: (x: number, y: number, ratio: number) => {}\n  ratio: number\n  value: number\n  height?: string\n  square?: boolean\n  onClick?: (x: number, y: number) => void\n}\n\nconst noop = (returnVal: any) => () => returnVal\n\nconst Cell = ({\n  render = noop(null),\n  style = noop({}),\n  ratio,\n  posX,\n  posY,\n  square = false,\n  height = '2rem',\n  value,\n  onClick\n}: Props) => {\n  return (\n    <div\n      onClick={() => (onClick || noop({}))(posX, posY)}\n      style={{\n        border: '1px solid #fff',\n        borderWidth: '1px 1px 0 0',\n        textAlign: 'center',\n        color: `rgb(0, 0, 0, ${ratio / 2 + 0.4})`,\n        overflow: 'hidden',\n        boxSizing: 'border-box',\n        flexGrow: square ? 0 : 1,\n        flexBasis: square ? height : 0,\n        flexShrink: 0,\n        height: height,\n        lineHeight: height,\n        borderRadius: '4px',\n        fontSize: '.8rem',\n        cursor: onClick ? 'pointer' : 'initial',\n        background: `rgb(12, 160, 44, ${ratio + 0.05})`,\n        ...style(posX, posY, ratio)\n      }}\n    >\n      {render(posX, posY, value)}\n    </div>\n  )\n}\n\nexport default React.memo(Cell)\n","import React from 'react'\n\ninterface Props {\n  children: any\n  reverse?: boolean\n}\n\nexport default function Row({ children, reverse = false }: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: reverse ? 'row-reverse' : 'row',\n        justifyContent: reverse ? 'flex-end' : 'initial'\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  labels: string[]\n  xLabelsStyle?: (index: number) => {}\n  square?: boolean\n  height: string\n}\n\nexport default function XLabels({\n  labels,\n  xLabelsStyle = () => ({}),\n  height,\n  square = false\n}: Props) {\n  const widthPercent = `${100 / labels.length}%`\n  return (\n    <div style={{ display: 'flex', textAlign: 'center' }}>\n      {labels.map((label, index) => (\n        <div\n          key={label}\n          style={{\n            padding: '0.2rem 0',\n            boxSizing: 'border-box',\n            flexGrow: square ? 'initial' : 1,\n            overflow: 'hidden',\n            flexShrink: 1,\n            flexBasis: square ? height : widthPercent,\n            width: square ? height : widthPercent,\n            ...xLabelsStyle(index)\n          }}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  children: any\n  reverse?: boolean\n  grow?: boolean\n}\n\nexport default function Column({\n  children,\n  grow = false,\n  reverse = false\n}: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: reverse ? 'column-reverse' : 'column',\n        flexGrow: grow ? 1 : 0\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  labels: string[]\n  height: string\n  reverse?: boolean\n  yLabelsStyle?: (index: number) => {}\n}\n\nexport default function YLabels({\n  labels,\n  height,\n  yLabelsStyle = () => ({}),\n  reverse = false\n}: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: reverse ? 'left' : 'right'\n      }}\n    >\n      {labels.map((label, index) => (\n        <div\n          key={label}\n          style={{\n            boxSizing: 'border-box',\n            padding: '0 0.2rem',\n            lineHeight: height,\n            ...yLabelsStyle(index)\n          }}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  xLabelHeight: number\n  isXLabelReverse: boolean\n  children: any\n}\n\nexport default function YLabelAligner({\n  xLabelHeight,\n  isXLabelReverse,\n  children\n}: Props) {\n  const style = {\n    [isXLabelReverse ? 'marginBottom' : 'marginTop']: `${xLabelHeight}px`\n  }\n  return <div style={style}>{children}</div>\n}\n","import React from 'react'\n\ninterface ClientHeight {\n  clientHeight: number\n}\n\nexport default function useElemetHeight(\n  initHeight: number\n): [number, React.MutableRefObject<any>] {\n  const eleRef = React.useRef(null)\n  const [eleHeight, setEleHeight] = React.useState<number>(initHeight)\n\n  React.useEffect(() => {\n    if (eleRef.current) {\n      const height = ((eleRef.current || {}) as ClientHeight).clientHeight\n      setEleHeight(height)\n    }\n  }, [])\n\n  return [eleHeight, eleRef]\n}\n","import * as React from 'react'\nimport Cell from './Cell'\nimport Row from './Row'\nimport XLabels from './XLabels'\nimport Column from './Column'\nimport YLabels from './YLabels'\nimport YLabelAligner from './YLabelAligner'\nimport useElemetHeight from './useElemetHeight'\n\ninterface Props {\n  data: number[][]\n  xLabels?: string[]\n  yLabels?: string[]\n  cellHeight?: string\n  square?: boolean\n  xLabelsPos?: 'top' | 'bottom'\n  yLabelsPos?: 'left' | 'right'\n  xLabelsStyle?: (index: number) => {}\n  yLabelsStyle?: (index: number) => {}\n  cellStyle?: (x: number, y: number, ratio: number) => {}\n  cellRender?: (x: number, y: number, value: number) => {}\n  onClick?: (x: number, y: number) => void\n}\n\nfunction getMinMax(data: number[][]): [number, number] {\n  const flatArray = data.reduce((i, o) => [...o, ...i], [])\n  const max = Math.max(...flatArray)\n  const min = Math.min(...flatArray)\n  return [min, max]\n}\n\nexport const HeatMapGrid = ({\n  data,\n  xLabels,\n  yLabels,\n  xLabelsPos = 'top',\n  yLabelsPos = 'left',\n  square = false,\n  cellHeight = '2px',\n  xLabelsStyle,\n  yLabelsStyle,\n  cellStyle,\n  cellRender,\n  onClick\n}: Props) => {\n  const [xLabelHeight, xLabelRef] = useElemetHeight(22)\n  const [min, max] = getMinMax(data)\n  const minMaxDiff = max - min\n  const isXLabelReverse = xLabelsPos === 'bottom'\n  const isYLabelReverse = yLabelsPos === 'right'\n\n  return (\n    <Row reverse={isYLabelReverse}>\n      {yLabels && (\n        <YLabelAligner\n          xLabelHeight={xLabelHeight}\n          isXLabelReverse={isXLabelReverse}\n        >\n          <YLabels\n            reverse={isYLabelReverse}\n            labels={yLabels}\n            height={cellHeight}\n            yLabelsStyle={yLabelsStyle}\n          />\n        </YLabelAligner>\n      )}\n      <Column reverse={isXLabelReverse} grow={!square}>\n        <div ref={xLabelRef}>\n          {xLabels && (\n            <XLabels\n              labels={xLabels}\n              xLabelsStyle={xLabelsStyle}\n              height={cellHeight}\n              square={square}\n            />\n          )}\n        </div>\n        <Column>\n          {data.map((rowItems, xi) => (\n            <Row key={xi}>\n              {rowItems.map((value, yi) => (\n                <Cell\n                  key={`${xi}-${yi}`}\n                  posX={xi}\n                  posY={yi}\n                  onClick={onClick}\n                  value={value}\n                  height={cellHeight}\n                  square={square}\n                  render={cellRender}\n                  style={cellStyle}\n                  ratio={(value - min) / minMaxDiff}\n                />\n              ))}\n            </Row>\n          ))}\n        </Column>\n      </Column>\n    </Row>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}